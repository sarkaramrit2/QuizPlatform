/* Js Functions of solr admin 
 */

function addError(message) {
	if(message!=null && message!="" && message!=undefined)
	$("#message")
			.html(
					'<div class="alert alert-danger alert-dismissable"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>'
							+ message + '</div>');
}

function addMessage(message) {
	if(message!=null && message!="" && message!=undefined)
	$("#message")
			.html(
					'<div class="alert alert-info alert-dismissable"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>'
							+ message + '</div>');
}

function addSuccessMessage(message) {
	if(message!=null && message!="" && message!=undefined)
	$("#message")
			.html(
					'<div class="alert alert-success alert-dismissable"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>'
							+ message + '</div>');
}

function removeMessage() {
	$("#message").html('');
}

//AngularJs handling

var app = angular.module('myApp', ['ngTable', 'ui.bootstrap','ui.bootstrap.datetimepicker']);
app.directive('dateTimeInput', [ function() {
	"use strict";
	return {
		require : 'ngModel',
		restrict : 'A',
		link : function(scope, element, attrs, controller) {

			if (!attrs.dateTimeInput) {
				throw ("dateTimeInput must specify a date format");
			}

			var validateFn = function(viewValue) {

				var result = viewValue;

				if (viewValue) {
					var momentValue = moment(viewValue);
					if (momentValue.isValid()) {
						controller.$setValidity(attrs.ngModel, true);
						result = momentValue.format();
					} else {
						controller.$setValidity(attrs.ngModel, false);
					}
				}

				return result;
			};

			var formatFn = function(modelValue) {
				var result = modelValue;
				if (modelValue && moment(modelValue).isValid()) {
					result = moment(modelValue).format(attrs.dateTimeInput);
				}
				return result;
			};

			controller.$parsers.unshift(validateFn);

			controller.$formatters.push(formatFn);

			element.bind('blur', function() {
				var viewValue = controller.$modelValue;
				angular.forEach(controller.$formatters, function(formatter) {
					viewValue = formatter(viewValue);
				});
				controller.$viewValue = viewValue;
				controller.$render();
			});
		}
	};
} ]);
app.service('modalService', ['$modal', function($modal) {
					var modalDefaults = {
						backdrop : true,
						keyboard : true,
						modalFade : true,
						template : '<div class="modal-header"><h3 class="modal-title">{{modalOptions.headerText}}</h3></div><div class="modal-body"><p>{{modalOptions.bodyText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="modalOptions.ok();">{{modalOptions.actionButtonText}}</button><button class="btn btn-warning" ng-click="modalOptions.close()">{{modalOptions.closeButtonText}}</button></div>'
					};

					var modalOptions = {
						closeButtonText : 'Close',
						actionButtonText : 'OK',
						headerText : 'Proceed?',
						bodyText : 'Perform this action?'
					};

					this.showModal = function(customModalDefaults,
							customModalOptions) {
						if (!customModalDefaults)
							customModalDefaults = {};
						customModalDefaults.backdrop = 'static';
						return this.show(customModalDefaults,
								customModalOptions);
					};

					this.show = function(customModalDefaults,
							customModalOptions) {
						// Create temp objects to work with since we're in a
						// singleton service
						var tempModalDefaults = {};
						var tempModalOptions = {};

						// Map angular-ui modal custom defaults to modal
						// defaults defined in service
						angular.extend(tempModalDefaults, modalDefaults,
								customModalDefaults);

						// Map modal.html $scope custom properties to defaults
						// defined in service
						angular.extend(tempModalOptions, modalOptions,
								customModalOptions);

						if (!tempModalDefaults.controller) {
							tempModalDefaults.controller = function($scope,
									$modalInstance) {
								$scope.modalOptions = tempModalOptions;
								$scope.modalOptions.ok = function(result) {
									$modalInstance.close(result);
								};
								$scope.modalOptions.close = function(result) {
									$modalInstance.dismiss('cancel');
								};
							}
						}

						return $modal.open(tempModalDefaults).result;
					};

				} ]);
app.service('ajaxService', ['$http', function ($http) {
    this.AjaxPost = function (data, route, successFunction, errorFunction) {/* alert(JSON.stringify(data)); */
    		removeMessage();
    	// setTimeout(function () {
            $http.post(route, data).success(function (response, status, headers, config) {
            	var status = response['status'];
       			var msg = response['message'];
       			if (status == "success") {
       				addSuccessMessage(msg);
       			} else {
       					addError(msg);
       			}
                successFunction(response, status);
            }).error(function (response, status) {
                errorFunction(response);
            });
    	// }, 1000);
    };
    this.AjaxPostWithParam = function (data, route, successFunction, errorFunction) {/* alert(JSON.stringify(data)); */
		removeMessage();
	// setTimeout(function () {
        $http.post(route, data, {headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}}).success(function (response, status, headers, config) {
        	var status = response['status'];
   			var msg = response['message'];
   			if (status == "success") {
   				addSuccessMessage(msg);
   			} else {
   					addError(msg);
   			}
            successFunction(response, status);
        }).error(function (response, status) {
            errorFunction(response);
        });
	// }, 1000);
};
    this.AjaxGetWithData = function (data, route, successFunction, errorFunction) {// alert(JSON.stringify(data));
    		removeMessage();
    	// setTimeout(function () {
           $http({ method: 'GET', url: route, params: data }).success(function (response, status, headers, config) {
        	var status = response['status'];
   			var msg = response['message'];
   			if (status == "success") {
   				addSuccessMessage(msg);
   			} else {
   					addError(msg);
   			}
   			successFunction(response);  
            }).error(function (response, status) {
                errorFunction(response);
            });
    	// }, 1000);
    };
}]);

