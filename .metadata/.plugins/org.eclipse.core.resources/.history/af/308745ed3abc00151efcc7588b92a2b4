<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">

	<!-- Activate @Configurable injection -->
	<context:spring-configured />
	
	<!-- load http client properties file -->
	<bean id="httpclientProperties" class="com.snapdeal.base.utils.HttpClientPropertiesUtil">
    	<property name="location" value="/soa-config/httpclient.properties"/>
	</bean>
	
	<!-- environment context bean -->
	<bean id="appEnvironmentContext" class="com.snapdeal.base.startup.config.AppEnvironmentContext" lazy-init="false">
    	<constructor-arg value="SearchAdmin"/>
	</bean>
	
	<!-- enable auto-scan for all @Repository, @Service, @Controller java files 
		for beans -->
	<context:component-scan base-package="com.snapdeal">
		<context:exclude-filter type="regex" expression="com.snapdeal.base.startup.dao.*" />
		<context:exclude-filter type="regex" expression="com.snapdeal.base.startup.service.*" />
		<context:exclude-filter type="regex" expression="com.snapdeal.base.notification.*" />
		<context:exclude-filter type="regex" expression="com.snapdeal.scheduling..*" />
        <context:exclude-filter type="regex" expression="com.snapdeal.concurrent.cache..*.impl.EhCache.*" />
	</context:component-scan>
	
	<!-- Special bean creation for ipms client service impl so as to set or 
		unset dummy client -->
	<bean id="indexerIPMSService"
		class="com.snapdeal.services.indexer.impl.IndexerIPMSServiceImpl">
		<property name="ipmsClientService"  ref="#{clientSelector.getClient('ipms.client')}" />		
	</bean>
	<!-- Special bean creation for cocofs client service impl so as to set or 
		unset dummy client -->
	<bean id="indexerCOCOFSService"
		class="com.snapdeal.services.indexer.impl.IndexerCOCOFSServiceImpl">
				<property name="cocofsClientService" ref="#{clientSelector.getClient('cocofs.client')}" />
	</bean>
	<bean id="indexerCatalogService"
        class="com.snapdeal.services.indexer.impl.IndexerCatalogServiceImpl">
        <property name="productClientService"  ref="#{clientSelector.getClient('cams.client')}" />
    </bean>
	<bean id="indexerCatalogSellService"
        class="com.snapdeal.services.indexer.impl.IndexerCatalogSellServiceImpl">
        <property name="omsClient" ref="#{clientSelector.getClient('oms.client')}" />
    </bean>
    
    <!-- This needs to override mock client in startup impl -->
	<bean id="searchAdminStartupService"
        class="com.snapdeal.admin.services.search.impl.SearchAdminStartupServiceImpl">
        <property name="productClientService"  ref="#{clientSelector.getClient('cams.client')}" />
        <property name="tenantCacheBuilder"  ref="#{clientSelector.getClient('tenants.client')}" />
    </bean>

	<!-- add tomcat datasource instance to springs context -->
	<bean id="searchdataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/SearchDS" />
		<property name="resourceRef" value="true" />
	</bean>
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- define session factor for hibernate -->
	<bean id="searchSessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<qualifier value="search" />
		<property name="dataSource">
			<ref bean="searchdataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.snapdeal.search.core.entity" />
	</bean>
	
	<bean id="searchTxManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="searchSessionFactory" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="searchTxManager" />

	<aop:aspectj-autoproxy />
	
		<cache:annotation-driven/>
	<!-- <context:load-time-weaver/> -->
	
	<bean name="cacheManager" class="com.google.code.ssm.spring.SSMCacheManager">
     <property name="caches">
         <set>
			<ref bean="snapdealSSMCache"/>
         </set>
     </property>
    </bean>
    
     <bean name="snapdealSSMCache" class="com.snapdeal.services.search.cache.SearchSSMCache">
          <constructor-arg name="cache" index="0" ref="defaultCache"/>
          <!-- 15 minutes -->
          <constructor-arg name="expiration" index="1" value="86400"/>
          <!-- @CacheEvict(..., "allEntries" = true) will work -->
          <constructor-arg name="allowClear" index="2" value="true"/>
      </bean>
      
	<bean name="defaultCache" class="com.google.code.ssm.CacheFactory">
	     <property name="cacheName" value="defaultCache"/>
	     <property name="cacheClientFactory">
	        <bean name="cacheClientFactory" class="com.google.code.ssm.providers.elasticache.MemcacheClientFactoryImpl"/>
	     </property>
	     <property name="addressProvider">
	         <bean class="com.google.code.ssm.config.DefaultAddressProvider">
	             <property name="address" value="#{systemProperties['memcached.server']}"/> 
	         </bean>
	     </property>
	     <property name="configuration">
	         <bean class="com.google.code.ssm.providers.elasticache.ElastiCacheConfiguration">
	        	 <!-- set client mode to dynamic to enable Auto Discovery feature -->

				<property name="useAutoDiscovery" value="false" />    	 
	        	 
        		<property name="clientMode" value="#{T(net.spy.memcached.ClientMode).Static}" />
	            <!--  <property name="consistentHashing" value="true"/> -->
	         </bean>
	     </property>
	</bean>
	
	<bean name="suggesterCache" class="com.google.code.ssm.CacheFactory">
	     <property name="cacheName" value="suggesterCache"/>
	     <property name="cacheClientFactory">
	        <bean name="cacheClientFactory" class="com.google.code.ssm.providers.elasticache.MemcacheClientFactoryImpl"/>
	     </property>
	     <property name="addressProvider">
	         <bean class="com.google.code.ssm.config.DefaultAddressProvider">
	             <property name="address" value="#{systemProperties['memcached.suggester.server']}"/> 
	         </bean>
	     </property>
	 	<property name="configuration">
	         <bean class="com.google.code.ssm.providers.elasticache.ElastiCacheConfiguration">
	        	 <!-- set client mode to dynamic to enable Auto Discovery feature -->

				<property name="useAutoDiscovery" value="false" />    	 
	        	 
        		<property name="clientMode" value="#{T(net.spy.memcached.ClientMode).Static}" />
	            <!--  <property name="consistentHashing" value="true"/> -->
	         </bean>
	     </property>
	</bean>
	
	

</beans>
