/* Js Functions of solr admin 
 */
app.controller('manageQueriesController', function($scope, ngTableParams,
		$filter, $modal, ajaxService, modalService) {
	$scope.initializeController = function() {// alert("inside initialize
		// controller");
		$scope.queryBoost = {};
		$scope.queryBoost.pogs = [];
		$scope.columns = [];
		$scope.editId = -1;
		/*$scope.queueUrl = '';*/
		$scope.queryBoost.query = '';
		$scope.disableFlag = false;
		$scope.columns = [ {
			title : '_id',
			field : '_id',
			visible : false,
			filter : {
				value : 'text'
			}
		}, {
			title : 'Pog Id',
			field : 'pogId',
			visible : true,
			filter : {
				value : 'text'
			}
		}, {
			title : 'Score',
			field : 'score',
			visible : true,
			filter : {
				boost : 'text'
			},
			type : 'number'
		} //,
		// { title: 'Start Date', field: 'startDate', visible: true, type: 'date' },
		//{ title: 'End Date', field: 'endDate', visible: true, type: 'date' }
		];

	};

	$scope.resetQuery = function() {
		//enable submit button
		$scope.disableFlag = false;
		$scope.queryBoost.pogs = [];
		$scope.tableParams.reload();
		$scope.queryBoost = {};
		$scope._queryBoost = angular.copy($scope.queryBoost);
	};

	$scope.submitQuery = function() {
		//disable submit button
		var pogObject = new Object();
		$scope.disableFlag = true;
		pogObject.query = $scope.queryBoost.query;
		ajaxService.AjaxGetWithData(pogObject,
				"/admin/queryBoost/getPogsByQuery", $scope.submitSuccess,
				$scope.submitError);
	};

	$scope.submitSuccess = function(response) {
		var items = response['items'];
		if (items != null && items['queryBoost'] != null) {
			$scope.queryBoost = items['queryBoost'];
			$scope._queryBoost = angular.copy($scope.queryBoost);
			$scope.tableParams.sorting($scope.columns[0].field, 'asc');
			$scope.tableParams.reload();
		} else {
			$scope.queryBoost.pogs = [];
			$scope._queryBoost = angular.copy($scope.queryBoost);
			$scope.tableParams.reload();
		}
	};

	$scope.submitError = function(response) {
		//Nothing to do as no exception handling at server side
	};

	$scope.deleteAllByQuery = function() {
		var modalOptions = {
			closeButtonText : 'Cancel',
			actionButtonText : 'Delete',
			headerText : 'Delete this Entry',
			bodyText : 'Are you sure you want to delete this Entry?'
		};
		/*if ($scope.queueUrl == undefined || $scope.queueUrl == null
				|| $scope.queueUrl.toString().trim() == '') {
			addError("Queue URL required!");
			return;
		}*/
		//disable submit button
		$scope.disableFlag = true;
		modalService.showModal({}, modalOptions).then(
				function(result) {
					var argument = "query=" + $scope.queryBoost.query;
							/*+ "&queueUrl=" + $scope.queueUrl;*/
					ajaxService.AjaxPostWithParam(argument,
							"/admin/queryBoost/deleteAllByQuery",
							$scope.deleteAllSuccess, $scope.deleteAllError);
				});
	};

	$scope.deleteAllSuccess = function(response) {
		var items = response['items'];
		if (items != null && items['queryBoost'] != null) {
			$scope.queryBoost = items['queryBoost'];
			$scope._queryBoost = angular.copy($scope.queryBoost);
			$scope.tableParams.sorting($scope.columns[0].field, 'asc');
			$scope.tableParams.reload();
		} else {
			$scope.queryBoost.pogs = [];
			$scope._queryBoost = angular.copy($scope.queryBoost);
			$scope.tableParams.reload();
		}
	};
	$scope.deleteAllError = function(response) {
		//Nothing to do 
	};

	$scope.indexQuery = function() {
		var argument = "query=" + $scope.queryBoost.query; 
		/*+ "&queueUrl=" + $scope.queueUrl;*/
		ajaxService.AjaxPostWithParam(argument,
				"/admin/queryBoost/indexQueryPog", $scope.indexPOGSuccess,
				$scope.indexPOGError);
	};

	$scope.indexPOGSuccess = function() {/*nothing to do*/
	};
	$scope.indexPOGError = function() {/*nothing to do*/
	};

	var getData = function() {
		return $scope.queryBoost.pogs;
	};

	$scope.editQuery = function(index) {
		$scope.editId = index;
	};

	$scope.updateDate = function() {
		
		if ($scope.queryBoost.startDate <= new Date()) {
			addError("Start date can not be past date!");
			return;
		}
		if ($scope.queryBoost.endDate <= new Date()) {
			addError("End date can not be past date!");
			return;
		}
		if ($scope.queryBoost.endDate <= $scope.queryBoost.startDate) {
			addError("End date can not be less than start date!");
			return;
		}
		$scope.editQuery(-1);//now update is going to happen successfully
		$scope.queryBoost.pogs=$scope._queryBoost.pogs;
		$scope.tableParams.reload();

		ajaxService.AjaxPost($scope.queryBoost,
				"/admin/queryBoost/updateQuery", $scope.updateQueryCompleted,
				$scope.updateQueryError);
	};

	var contains = function(pogId, index) {
    	for(var i=0; i< $scope.queryBoost.pogs.length; i++) { 
    		if(index!=i && $scope.queryBoost.pogs[i].pogId == pogId) {
    			return true;
    		}
    	}
    	return false;
    };
	
	
	$scope.updateQuery = function(row) {
		if (row.pogId == undefined || row.pogId == null
				|| row.pogId.toString().trim() == '') {
			addError("POG ID required!");
			return;
		}
		if (isNaN(row.pogId)) {
			addError("Not a valid pogId!");
			return;
		}
		if (contains(row.pogId.toString().trim(), $scope.queryBoost.pogs.indexOf(row))){
    		addError("POG ID already exists!");
			return;
		}
		/*if ($scope.queryBoost.startDate <= new Date()) {
			addError("Start date can not be past date!");
			return;
		}
		if ($scope.queryBoost.endDate <= new Date()) {
			addError("End date can not be past date!");
			return;
		}
		if ($scope.queryBoost.endDate <= $scope.queryBoost.startDate) {
			addError("End date can not be less than start date!");
			return;
		}*/
		//Date check is not required as it will act as blocker for updating pog or score
		if (row.score == undefined || row.score == null
				|| row.score.toString().trim() == '') {
			addError("Score required!");
			return;
		}
		if (Number(row.score) < 0 || Number(row.score) > 9999) {
			addError("Score value must be between 0 and 9999!");
			return;
		}
		if (isNaN(row.score)) {
			row.score = ''; 
			addError("Not a valid number!");
			return;
		}
		$scope.editQuery(-1);//now update is going to happen successfully
		$scope.queryBoost.endDate = $scope._queryBoost.endDate;
		$scope.queryBoost.startDate = $scope._queryBoost.startDate;
		ajaxService.AjaxPost($scope.queryBoost,"/admin/queryBoost/updateQuery", $scope.updateQueryCompleted,$scope.updateQueryError);
	};

	$scope.updateQueryError = function(response) {
		angular.copy($scope._queryBoost, $scope.queryBoost);
		$scope.tableParams.reload();
	};

	$scope.updateQueryCompleted = function(response) {
		var items = response['items'];
		if (items != null && items['queryBoost'] != null) {
			$scope.queryBoost = items['queryBoost'];
			$scope._queryBoost = angular.copy($scope.queryBoost);
		} else {
			angular.copy($scope._queryBoost, $scope.queryBoost);
		}
		$scope.tableParams.reload();
	};

	$scope.cancelQuery = function() {
		angular.copy($scope._queryBoost, $scope.queryBoost);
		$scope.tableParams.reload();
	};

	$scope.deleteQuery = function(row) {
		var modalOptions = {
			closeButtonText : 'Cancel',
			actionButtonText : 'Delete',
			headerText : 'Delete this Entry',
			bodyText : 'Are you sure you want to delete this Entry?'
		};
		/*if ($scope.queueUrl == undefined || $scope.queueUrl == null
				|| $scope.queueUrl.toString().trim() == '') {
			addError("Queue URL required!");
			return;
		}*/
		modalService.showModal({}, modalOptions)
				.then(
						function(result) {
							var argument = "_id=" + row._id; 
							/*+ "&url=" + $scope.queueUrl;*/
							ajaxService.AjaxPostWithParam(argument,
									"/admin/queryBoost/deletePog",
									$scope.deleteQueryCompleted,
									$scope.deleteQueryError);
						});

	};

	$scope.deleteQueryError = function(response) {
		angular.copy($scope._queryBoost, $scope.queryBoost);
		$scope.tableParams.reload();
	};

	$scope.deleteQueryCompleted = function(response) {
		var items = response['items'];
		if (items != null && items['queryBoost'] != null) {
			$scope.queryBoost = items['queryBoost'];
			$scope._queryBoost = angular.copy($scope.queryBoost);
		} else {
			angular.copy($scope._queryBoost, $scope.queryBoost);
		}
		$scope.tableParams.reload();
	};

	$scope.tableParams = new ngTableParams({
		page : 1, // show first page
		count : 10, // count per page
	}, {
		total : function() {
			return getData().length;
		}, // length of data
		getData : function($defer, params) {
			$scope.editQuery(-1);
			var filteredData = params.filter() ? $filter('filter')(getData(),
					params.filter()) : getData();
			var orderedData = params.sorting() ? $filter('orderBy')(
					filteredData, params.orderBy()) : filteredData;

			params.total(orderedData.length); // set total for recalc pagination

			$defer.resolve(orderedData.slice((params.page() - 1)
					* params.count(), params.page() * params.count()));
		},
	});
	$scope.tableParams.settings().$scope = $scope;

	//Add modal

	$scope.openAddQueryModal = function(size) {
		var modalInstance = $modal.open({
			templateUrl : 'addQuery.html',
			controller : addQueryController,
			size : size,
			resolve : {
				queryBoost : function() {
					return $scope.queryBoost;
				}
			}
		});
		modalInstance.result.then(function(response) {
			var items = response['items'];
			if (items != null && items['queryBoost'] != null) {
				$scope.queryBoost = items['queryBoost'];
				$scope._queryBoost = angular.copy($scope.queryBoost);
			} else {
				angular.copy($scope._queryBoost, $scope.queryBoost);
			}
			$scope.tableParams.reload();
		}, function() {
			//$log.info('Modal dismissed at: ' + new Date());
		});
	};

	var addQueryController = function($scope, $modalInstance, ajaxService,
			queryBoost) {
		$scope.queryBoost = queryBoost;
		$scope.query = {
			pogId : '',
			score : '',
			_id : ''
		};
		$scope.addPog = function() {
			$scope.value_error = false;
			$scope.score_error = false;
			for (var i = 0; i < $scope.queryBoost.length; i++) {
				if ($scope.queryBoost.pogId[i].value == $scope.query.pogId) {
					$scope.error = "PogId already exists!";
					$scope.value_error = true;
					return;
				}
			}

			if ($scope.queryBoost.startDate <= new Date()) {
				$scope.error = "Start date can not be past date!";
				$scope.start_date_error = true;
				return;
			}
			if ($scope.queryBoost.endDate <= new Date()) {
				$scope.error = "End date can not be past date!";
				$scope.end_date_error = true;
				return;
			}
			if ($scope.queryBoost.endDate <= $scope.queryBoost.startDate) {
				$scope.error = "End date can not be less than start date!";
				$scope.end_date_error = true;
				return;
			}
			if (isNaN($scope.query.pogId)) {
				$scope.query.pogId = '';
				$scope.query.score = '';
				addError("Not a valid pogId!");
				$scope.value_error = true;
				return;
			}
			if (Number($scope.query.score) < 0
					|| Number($scope.query.score) > 9999) {
				$scope.error = "Score value must be between 0 and 9999!";
				$scope.score_error = true;
				return;
			}
			$scope.queryBoost.pogs.push($scope.query);
			alert(JSON.stringify($scope.queryBoost));
			ajaxService.AjaxPost($scope.queryBoost, "/admin/queryBoost/addPog",
					$scope.addQueryCompleted, $scope.addQueryError);
		};

		$scope.addQueryCompleted = function(response) {
			$modalInstance.close(response);
		};

		$scope.addQueryError = function(response) {
			$modalInstance.close(response);
		};

		$scope.closeAddQueryModal = function() {
			$modalInstance.dismiss('cancel');
		};
	};
});
